openapi: 3.0.3
info:
  title: Agriprix Log Management API
  description: |
    A comprehensive log management system API that allows organizations to upload, process, and query various log formats.
    
    ## Features
    - Multi-format log parsing (JSON Lines, Syslog, Nginx Error, CLF)
    - Organization-based log isolation
    - Role-based access control
    - File upload and batch processing
    - Advanced search and filtering
    - Manual log creation (Manager only)
    - Flattened metadata storage for optimized querying
    - Environment-based CORS configuration
    
    ## Authentication
    All endpoints except `/auth/login`, `/auth/signup`, and `/health` require a valid JWT token in the Authorization header.
    
    ## CORS Configuration
    The API supports configurable CORS origins via the `ALLOWED_ORIGINS` environment variable.
    Supports multiple origins separated by commas (e.g., `http://localhost:5173,http://frontend:5173`).
    
    ## Docker Deployment
    The API supports both development and production Docker deployments:
    - Development: `docker compose --profile dev up --build`
    - Production: `docker compose --profile prod up --build`
    
  version: 1.0.0
  contact:
    name: Agriprix Tech Team
    email: tech@agriprix.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.agriprix.com
    description: Production server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API server is running and healthy
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy

  /auth/signup:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user and create or link to an organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
                - organization
                - role
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@company.com
                username:
                  type: string
                  minLength: 3
                  example: johndoe
                password:
                  type: string
                  minLength: 6
                  example: securePassword123
                organization:
                  type: string
                  example: Acme Corporation
                role:
                  $ref: '#/components/schemas/Role'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  organization:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 507f1f77bcf86cd799439011
                      name:
                        type: string
                        example: Acme Corporation
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with username, email, and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: john.doe@company.com
                password:
                  type: string
                  example: securePassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: Invalid credentials
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /logs:
    get:
      tags:
        - Logs
      summary: Get logs with filtering and pagination
      description: Retrieve logs for the authenticated user's organization with optional filtering and pagination
      security:
        - bearerAuth: []
      parameters:
        - name: level
          in: query
          description: Filter by log level
          schema:
            $ref: '#/components/schemas/LogLevel'
        - name: service
          in: query
          description: Filter by service name
          schema:
            type: string
            example: nginx
        - name: tag
          in: query
          description: Filter by tags (can be specified multiple times)
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          example: [production, web]
        - name: start_date
          in: query
          description: Filter logs after this date (ISO 8601 format)
          schema:
            type: string
            format: date-time
            example: 2024-01-01T00:00:00Z
        - name: end_date
          in: query
          description: Filter logs before this date (ISO 8601 format)
          schema:
            type: string
            format: date-time
            example: 2024-12-31T23:59:59Z
        - name: search
          in: query
          description: Search in log messages and services
          schema:
            type: string
            example: error database connection
        - name: limit
          in: query
          description: Number of logs to return (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 25
        - name: offset
          in: query
          description: Number of logs to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 50
      responses:
        '200':
          description: Logs retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of logs matching the query
              schema:
                type: integer
                example: 1250
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
              example:
                logs:
                  - _id: 507f1f77bcf86cd799439011
                    timestamp: "2024-03-15T10:30:00.000Z"
                    level: error
                    service: nginx
                    message: "Connection failed to database server"
                    format: nginx_error
                    organizationID: 507f1f77bcf86cd799439012
                    meta:
                      client_ip: "192.168.1.100"
                      status_code: 500
                    original_level: error
                    createdAt: "2024-03-15T10:30:01.000Z"
                    updatedAt: "2024-03-15T10:30:01.000Z"
                pagination:
                  offset: 0
                  limit: 10
                  total_pages: 125
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Logs
      summary: Create a new log entry
      description: Create a single log entry for testing purposes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - format
              properties:
                format:
                  $ref: '#/components/schemas/LogFormat'
      responses:
        '200':
          description: Log created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Log created successfully
                  log_id:
                    type: string
                    example: 507f1f77bcf86cd799439011
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /logs/ingest:
    post:
      tags:
        - Logs
      summary: Create a single log entry manually
      description: |
        Create a single log entry manually for testing or manual logging purposes.
        This endpoint is restricted to users with MANAGER role only.
        
        The metadata object will be automatically flattened to improve query performance.
        Nested objects are converted to a single-level structure while preserving original key names.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - level
                - service
                - message
                - format
              properties:
                level:
                  $ref: '#/components/schemas/LogLevel'
                service:
                  type: string
                  description: Service or application name
                  example: api-gateway
                message:
                  type: string
                  description: Log message content
                  example: Authentication failed for user request
                format:
                  $ref: '#/components/schemas/LogFormat'
                meta:
                  type: object
                  additionalProperties: true
                  description: Additional metadata (will be flattened automatically)
                  example:
                    user_id: "user_123"
                    endpoint: "/api/protected"
                    ip_address: "192.168.1.100"
                    response_time: 250
            example:
              level: error
              service: api-gateway
              message: Authentication failed for user request
              format: json_lines
              meta:
                user_id: "user_123"
                endpoint: "/api/protected"
                ip_address: "192.168.1.100"
                response_time: 250
      responses:
        '200':
          description: Log created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Log created successfully
                  log_id:
                    type: string
                    example: 64f8a1b2c3d4e5f6a7b8c9d0
                  log:
                    $ref: '#/components/schemas/Log'
              example:
                message: Log created successfully
                log_id: 64f8a1b2c3d4e5f6a7b8c9d0
                log:
                  _id: 64f8a1b2c3d4e5f6a7b8c9d0
                  timestamp: "2024-01-15T10:30:00.000Z"
                  level: error
                  service: api-gateway
                  message: Authentication failed for user request
                  format: json_lines
                  organizationID: 507f1f77bcf86cd799439012
                  meta:
                    user_id: "user_123"
                    endpoint: "/api/protected"
                    ip_address: "192.168.1.100"
                    response_time: 250
                  original_level: error
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /logs/upload:
    post:
      tags:
        - Logs
      summary: Upload and process log file
      description: |
        Upload a log file for processing. The system will automatically detect the log format
        and parse each line, creating log entries associated with the user's organization.
        
        Supported formats:
        - JSON Lines (.json, .jsonl)
        - Syslog (.log, .txt)
        - Nginx Error logs (.log, .txt)
        - Common Log Format - CLF (.log, .txt)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Log file to upload (.log, .txt, .json, .jsonl)
            encoding:
              file:
                contentType: text/plain, application/json
      responses:
        '200':
          description: File processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: File processed successfully
                  stats:
                    type: object
                    properties:
                      total_lines:
                        type: integer
                        example: 1500
                      parsed_logs:
                        type: integer
                        example: 1485
                      error_count:
                        type: integer
                        example: 15
                      file_name:
                        type: string
                        example: application.log
                      file_size:
                        type: integer
                        example: 2048576
        '400':
          description: Bad request (no file, invalid file type, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                no_file:
                  value:
                    detail: No file uploaded
                invalid_type:
                  value:
                    detail: Invalid file type. Only .log, .txt, .json, and .jsonl files are allowed.
                file_too_large:
                  value:
                    detail: File size exceeds 5MB limit
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /logs/{log_id}:
    get:
      tags:
        - Logs
      summary: Get a specific log entry
      description: Retrieve a single log entry by its ID
      security:
        - bearerAuth: []
      parameters:
        - name: log_id
          in: path
          required: true
          description: MongoDB ObjectId of the log entry
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Log entry retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
              example:
                _id: 507f1f77bcf86cd799439011
                timestamp: "2024-03-15T10:30:00.000Z"
                level: error
                service: nginx
                message: "Connection failed to database server"
                format: nginx_error
                organizationID: 507f1f77bcf86cd799439012
                meta:
                  client_ip: "192.168.1.100"
                  status_code: 500
                original_level: error
                createdAt: "2024-03-15T10:30:01.000Z"
                updatedAt: "2024-03-15T10:30:01.000Z"
        '404':
          description: Log entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: Log not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - Logs
      summary: Partially update a log entry
      description: Update specific fields of a log entry (requires MANAGER role)
      security:
        - bearerAuth: []
      parameters:
        - name: log_id
          in: path
          required: true
          description: MongoDB ObjectId of the log entry
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  $ref: '#/components/schemas/LogLevel'
                message:
                  type: string
                  example: Updated log message
                meta:
                  type: object
                  additionalProperties: true
                  example:
                    priority: high
                    resolved: true
            example:
              level: warn
              meta:
                priority: high
                resolved: true
      responses:
        '200':
          description: Log updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Log patched successfully
        '404':
          description: Log entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: Log not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Logs
      summary: Update log message
      description: Update the message field of a log entry (requires MANAGER role)
      security:
        - bearerAuth: []
      parameters:
        - name: log_id
          in: path
          required: true
          description: MongoDB ObjectId of the log entry
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: Updated log message with additional context
      responses:
        '200':
          description: Log message updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Log updated successfully
        '404':
          description: Log entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: Log not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Logs
      summary: Delete a log entry
      description: Delete a specific log entry (requires MANAGER role)
      security:
        - bearerAuth: []
      parameters:
        - name: log_id
          in: path
          required: true
          description: MongoDB ObjectId of the log entry
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Log deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Log deleted successfully
        '404':
          description: Log entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: Log not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login/signup endpoints

  schemas:
    Role:
      type: string
      enum: [viewer, manager]
      description: User role determining access permissions
      example: viewer

    LogLevel:
      type: string
      enum: [debug, info, notice, warn, error, critical, alert, emergency, fatal]
      description: Log severity level
      example: error

    LogFormat:
      type: string
      enum: [json_lines, syslog, nginx_error, clf]
      description: Format of the original log entry
      example: json_lines

    User:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@company.com
        organizationID:
          type: string
          example: 507f1f77bcf86cd799439012
        role:
          $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
          example: "2024-03-15T09:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-03-15T09:00:00.000Z"

    Organization:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439012
        name:
          type: string
          example: Acme Corporation
        createdAt:
          type: string
          format: date-time
          example: "2024-03-15T09:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-03-15T09:00:00.000Z"

    Log:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        timestamp:
          type: string
          format: date-time
          description: When the log event occurred
          example: "2024-03-15T10:30:00.000Z"
        level:
          $ref: '#/components/schemas/LogLevel'
        service:
          type: string
          description: Service or application that generated the log
          example: nginx
        message:
          type: string
          description: Log message content
          example: "Connection failed to database server"
        format:
          $ref: '#/components/schemas/LogFormat'
        organizationID:
          type: string
          description: Organization that owns this log
          example: 507f1f77bcf86cd799439012
        meta:
          type: object
          additionalProperties: true
          description: Additional metadata extracted from the log
          nullable: true
          example:
            client_ip: "192.168.1.100"
            status_code: 500
            request_id: "abc123"
        original_level:
          type: string
          description: Original log level before normalization
          example: ERROR
        createdAt:
          type: string
          format: date-time
          example: "2024-03-15T10:30:01.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-03-15T10:30:01.000Z"

    PaginationInfo:
      type: object
      properties:
        offset:
          type: integer
          description: Number of items skipped
          example: 0
        limit:
          type: integer
          description: Maximum number of items returned
          example: 10
        total_pages:
          type: integer
          description: Total number of pages available
          example: 125

    Error:
      type: object
      properties:
        detail:
          type: string
          description: Error message describing what went wrong
          example: Validation failed

    ValidationError:
      type: object
      properties:
        detail:
          type: string
          example: Validation errors
        errors:
          type: array
          items:
            type: object
            properties:
              msg:
                type: string
                example: Email is required
              param:
                type: string
                example: email
              location:
                type: string
                example: body

  responses:
    ValidationError:
      description: Validation error in request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            detail: Validation errors
            errors:
              - msg: Valid email is required
                param: email
                location: body
              - msg: Password is required
                param: password
                location: body

    Unauthorized:
      description: Authentication required or token invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            missing_token:
              value:
                detail: Bearer authentication required
            invalid_token:
              value:
                detail: Invalid token
            expired_token:
              value:
                detail: Token has expired

    Forbidden:
      description: Insufficient permissions for this operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: Manager role required for this operation

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: Internal server error

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and registration
  - name: Logs
    description: Log management operations (viewing, uploading, processing) 